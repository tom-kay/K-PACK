<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>GrapeCity.CalcEngine</name>
  </assembly>
  <members>
    <member name="T:GrapeCity.CalcEngine.AsyncApplication">
      <summary>Represents the unique asynchronous application which serve data base on real-time data (topic parameter(s)). This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.#ctor">
      <summary>Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.AsyncApplication" /> class.</summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.AsyncApplication.IsServerStarted">
      <summary>Gets or sets a value indicating whether this instance is server started.</summary>
      <value>
        <c>true</c> if this instance is server started; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.AsyncApplication.Topics">
      <summary>Gets the topics.</summary>
      <value>The topics.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.AddChangedTopic(System.Int32,System.String)">
      <summary>Adds the specified topic to the changed list.</summary>
      <param name="topicId">An integer value indicates the topic ID.</param>
      <param name="topicKey">A string value indicates the topic key.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.ConnectData(GrapeCity.CalcEngine.AsyncTopic)">
      <summary>Connects the data.</summary>
      <param name="topic">The asynchronous topic.</param>
      <returns>
        <c>true</c> if connecting data is successfully, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.CreateTopic(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.IArguments)">
      <summary>Creates the asynchronous topic.</summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> instance indicates the evaluation context.</param>
      <param name="arguments">An <see cref="T:GrapeCity.CalcEngine.IArguments" /> instance indicates all arguments of the function.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.AsyncTopic" /> object indicates the asynchronous topic.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.CreateTopicKey(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.IArguments)">
      <summary>Creates the unique topic key which will be used to classify among asynchronous calls.</summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> instance indicates the evaluation context.</param>
      <param name="arguments">An <see cref="T:GrapeCity.CalcEngine.IArguments" /> instance indicates all arguments of the function.</param>
      <returns>A <see cref="T:System.String" /> value represents the unique topic key.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.Dispose(System.Boolean)">
      <summary>Releases unmanaged and - optionally - managed resources.</summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.Finalize">
      <summary>Finalizes an instance of the <see cref="T:GrapeCity.CalcEngine.AsyncApplication" /> class.</summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.GetData">
      <summary>Gets last received data of all topics in the asynchronous application.</summary>
      <returns>A dictionary maps topic's ID to the received data.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.OnDataChanged">
      <summary>Called when the data, which received from asynchronous application, is changed.</summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.Reset">
      <summary>Resets this instance.</summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.Start">
      <summary>Starts the asynchronous application.</summary>
      <returns>
        <c>true</c> if the asynchronous application starts successful, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncApplication.Stop">
      <summary>Stops the asynchronous application.</summary>
    </member>
    <member name="E:GrapeCity.CalcEngine.AsyncApplication.DataChanged">
      <summary>Occurs when the data, which received from asynchronous application, is changed.</summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.AsyncFunction">
      <summary>Represents an asynchronous function which result can be returned later without locking the calculating thread. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
      <seealso cref="T:GrapeCity.CalcEngine.Function" />
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncFunction.#ctor(System.String,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.AsyncFunction" /> class.</summary>
      <param name="functionName">Name of the function.</param>
      <param name="minArgs">An integer value indicates the minimum amount of arguments.</param>
      <param name="maxArgs">An integer value indicates the maximum amount of arguments.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncFunction.CreateApplication(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.IArguments)">
      <summary>Creates the asynchronous application.</summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> instance indicates the evaluation context.</param>
      <param name="arguments">An <see cref="T:GrapeCity.CalcEngine.IArguments" /> instance indicates all arguments of the function.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.AsyncApplication" /> object indicates the asynchronous application.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncFunction.CreateApplicationKey(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.IArguments)">
      <summary>Creates the unique application key which will be used to classify among asynchronous functions.</summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> instance indicates the evaluation context.</param>
      <param name="arguments">An <see cref="T:GrapeCity.CalcEngine.IArguments" /> instance indicates all arguments of the function.</param>
      <returns>A <see cref="T:System.String" /> value represents the unique application key.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.AsyncTopic">
      <summary>Represents an asynchronous topic. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.AsyncTopic.#ctor">
      <summary>Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.AsyncTopic" /> class.</summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.BinaryOperatorExpression.ExpressionCount">
      <summary>Gets the total count of child expression(s).</summary>
      <value>An integer value indicates the total count of child expression(s).</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.BinaryOperatorExpression.LeftExpression">
      <summary>Gets or sets the left expression.</summary>
      <value>The left expression.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.BinaryOperatorExpression.RightExpression">
      <summary>Gets or sets the right expression.</summary>
      <value>The right expression.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.BinaryOperatorExpression.Symbol">
      <summary>Gets the symbol of the operator.</summary>
      <value>A string value indicates the symbol of the operator.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.Equals(GrapeCity.CalcEngine.Expression)">
      <summary>Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" nolink="true" />.</summary>
      <param name="other">The other.</param>
      <returns>
        <c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" nolink="true" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.GetExpression(System.Int32)">
      <summary>Gets the expression at the specified location.</summary>
      <param name="index">An integer value indicates the location of expression.</param>
      <returns>The expression at the specified location.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.GetHashCode">
      <summary>Returns a hash code for this instance.</summary>
      <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.SetExpression(System.Int32,GrapeCity.CalcEngine.Expression)">
      <summary>Replaces the expression at the specified location.</summary>
      <param name="index">An integer value indicates the location of expression to replace.</param>
      <param name="expression">The expression to replace.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
      <summary>Unparses the current <see cref="T:GrapeCity.CalcEngine.BinaryOperatorExpression" /> to the formula text.</summary>
      <param name="engine">The parser to unparse.</param>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
    </member>
    <member name="T:GrapeCity.CalcEngine.Expression">
      <summary>Represents a base class for an expression. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.Expression.ExpressionCount">
      <summary>Gets the total count of child expression(s).</summary>
      <value>An integer value indicates the total count of child expression(s).</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
      <summary>Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.</summary>
      <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.ContainsAbsoluteReference">
      <summary>Gets a value indicating whether the expression contains relative reference.</summary>
      <returns>
        <c>true</c> if the expression contains relative reference; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.ContainsHyperlink">
      <summary>Determines whether this expression contains hyperlink function.</summary>
      <returns>
        <c>true</c> if this instance contains hyperlink function; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.ContainsMixedReference">
      <summary>Gets a value indicating whether the expression contains both of relative reference and absolute reference.</summary>
      <returns>
        <c>true</c> if the expression contains both of relative reference and absolute reference; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.ContainsReference">
      <summary>Gets a value indicating whether the expression contains reference.</summary>
      <returns>
        <c>true</c> if the expression contains reference; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.ContainsRelativeReference">
      <summary>Gets a value indicating whether the expression contains relative reference.</summary>
      <returns>
        <c>true</c> if the expression contains relative reference; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.Equals(GrapeCity.CalcEngine.Expression)">
      <summary>Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" nolink="true" />.</summary>
      <param name="obj">An <see cref="T:GrapeCity.CalcEngine.Expression" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" nolink="true" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.</summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.GetExpression(System.Int32)">
      <summary>Gets the expression at the specified location.</summary>
      <param name="index">An integer value indicates the location of expression.</param>
      <returns>The expression at the specified location.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.GetHashCode">
      <summary>Returns a hash code for this instance.</summary>
      <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.SetExpression(System.Int32,GrapeCity.CalcEngine.Expression)">
      <summary>Replaces the expression at the specified location.</summary>
      <param name="index">An integer value indicates the location of expression to replace.</param>
      <param name="expression">The expression to replace.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.Expression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
      <summary>Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.</summary>
      <param name="engine">The formula engine.</param>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
    </member>
    <member name="T:GrapeCity.CalcEngine.Extensions">
      <summary>Contains extension methods for calculation engine assembly. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.Extensions.GetValue(GrapeCity.CalcEngine.IReadonlyPrimitiveValue,GrapeCity.CalcEngine.IEvaluationContext)">
      <summary>Gets the value of an <see cref="T:GrapeCity.CalcEngine.IReadonlyPrimitiveValue" /> instance as object.</summary>
      <param name="value">The value of an <see cref="T:GrapeCity.CalcEngine.IReadonlyPrimitiveValue" /> instance.</param>
      <param name="context">The evaluation context to get value from reference.</param>
      <returns>An object represents the value of an <see cref="T:GrapeCity.CalcEngine.IReadonlyPrimitiveValue" /> instance.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.FormulaEngine">
      <summary>Represents the formula engine.</summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.FormulaEngine.ContextTranslatedColumnCount">
      <summary>Gets or sets the translated column count of current reference source when we unparse the expression to formula.</summary>
      <value>An integer value represents the context translated column count.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.FormulaEngine.ContextTranslatedRowCount">
      <summary>Gets or sets the translated row count of current reference source when we unparse the expression to formula.</summary>
      <value>An integer value represents the context translated row count.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.FormulaEngine.Culture">
      <summary>Gets the current <see cref="T:System.Globalization.CultureInfo" /> object for parsing and unparsing process.</summary>
      <value>A <see cref="T:System.Globalization.CultureInfo" /> object represent the current culture.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.FormulaEngine.IsA1Reference">
      <summary>Gets a value indicating whether the current parsing mode is A1 reference style.</summary>
      <value>
        <c>true</c> if the current parsing mode is A1 reference style; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.AddResolver(GrapeCity.CalcEngine.ISymbolResolver)">
      <summary>Adds a custom symbol resolver which resolves un-parsed symbols like cell range reference, external reference...</summary>
      <param name="resolver">The custom symbol resolver to add.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.AddResolver(GrapeCity.CalcEngine.IFunctionResolver)">
      <summary>Adds the custom function resolver which resolve custom function(s).</summary>
      <param name="resolver">The custom function resolver to add.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.AddResolver(GrapeCity.CalcEngine.IOperatorResolver)">
      <summary>Adds the custom operator resolver which allow overriding standard operators by custom operators.</summary>
      <param name="resolver">The custom operator resolver to add.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.Dispose">
      <summary>Disposes this instance.</summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.EnterContext(GrapeCity.CalcEngine.IReferenceSource,System.Int32,System.Int32)">
      <summary>Enters the specified parsing context.</summary>
      <param name="source">The <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object which is using formula.</param>
      <param name="contextRow">An integer value indicates the context row index.</param>
      <param name="contextColumn">An integer value indicates the context column index.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.EnterContext(GrapeCity.CalcEngine.IReferenceSource,System.Int32,System.Int32,System.Boolean)">
      <summary>Enters the specified parsing context.</summary>
      <param name="source">The <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object which is using formula.</param>
      <param name="contextRow">An integer value indicates the context row index.</param>
      <param name="contextColumn">An integer value indicates the context column index.</param>
      <param name="isA1Reference">if set to <c>true</c> the formula is using A1 reference format. Otherwise, it uses R1C1 reference format.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.ExitContext">
      <summary>Exits the latest parsing context and restore the previous parsing context.</summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.Finalize">
      <summary>Finalizes an instance of the <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> class.</summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.Highlight(System.String)">
      <summary>Parses the specified formula text to expression.</summary>
      <param name="formulaText">A string indicates the formula text.</param>
      <param name="context">The context which provide addition information for parsing.</param>
      <param name="parsedExpression">The parsed expression.</param>
      <returns>
        <c>true</c> if the formula can be parsed to the <seealso cref="T:GrapeCity.CalcEngine.Expression" /> instance, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.Parse(System.String,GrapeCity.CalcEngine.Expression@)">
      <summary>Parses the specified formula text to expression.</summary>
      <param name="formulaText">A string indicates the formula text.</param>
      <param name="context">The context which provide addition information for parsing.</param>
      <param name="parsedExpression">The parsed expression.</param>
      <returns>
        <c>true</c> if the formula can be parsed to the <seealso cref="T:GrapeCity.CalcEngine.Expression" /> instance, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.RemoveResolver(GrapeCity.CalcEngine.ISymbolResolver)">
      <summary>Removes a custom symbol resolver which resolves un-parsed symbols like cell range reference, external reference...</summary>
      <param name="resolver">The custom symbol resolver to remove.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.RemoveResolver(GrapeCity.CalcEngine.IFunctionResolver)">
      <summary>Removes the custom function resolver which resolve custom function(s).</summary>
      <param name="resolver">The custom function resolver to remove.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.RemoveResolver(GrapeCity.CalcEngine.IOperatorResolver)">
      <summary>Removes the custom operator resolver which allow overriding standard operators by custom operators.</summary>
      <param name="resolver">The custom operator resolver to remove.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.StrictR1C1Boundary">
      <summary>All unbound ranges will be parsed as #REF! when we parse in R1C1 reference style.</summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.TryParseA1Reference(System.String,System.Int32,System.Int32,GrapeCity.CalcEngine.RangeReference@)">
      <summary>Converts the string representation of a range reference in A1 format its <see cref="T:GrapeCity.CalcEngine.RangeReference" /> equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="ref">A string containing a range reference to convert.</param>
      <param name="baseRow">An integer value indicates the context row.</param>
      <param name="baseColumn">An integer value indicates the context column.</param>
      <param name="rangeRef">A <see cref="T:GrapeCity.CalcEngine.RangeReference" /> value represents the parsed range reference.</param>
      <returns>
        <c>true</c> if s was converted successfully; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.TryParseR1C1Reference(System.String,GrapeCity.CalcEngine.RangeReference@)">
      <summary>Converts the string representation of a range reference in R1C1 format its <see cref="T:GrapeCity.CalcEngine.RangeReference" /> equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="ref">A string containing a range reference to convert.</param>
      <param name="rangeRef">A <see cref="T:GrapeCity.CalcEngine.RangeReference" /> value represents the parsed range reference.</param>
      <returns>
        <c>true</c> if s was converted successfully; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.Unparse(GrapeCity.CalcEngine.Expression)">
      <summary>Unparses the specified expression to formula text.</summary>
      <param name="expr">An <see cref="T:GrapeCity.CalcEngine.Expression" /> object represents the expression.</param>
      <returns>The formula text unparsed from the input expression.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseA1Reference(GrapeCity.CalcEngine.RangeReference)">
      <summary>Unparses the range reference in A1 reference style.</summary>
      <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the range reference.</param>
      <returns>A <see cref="T:System.String" /> value represents the range reference in A1 reference style.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseA1Reference(GrapeCity.CalcEngine.RangeReference,System.Text.StringBuilder)">
      <summary>Unparses the range reference in A1 reference style.</summary>
      <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the range reference.</param>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> object to store the range reference in A1 refrence style.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseA1Reference(GrapeCity.CalcEngine.CellReference)">
      <summary>Unparses the cell reference in A1 reference style.</summary>
      <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the cell reference.</param>
      <returns>A <see cref="T:System.String" /> value represents the cell reference in A1 reference style.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseA1Reference(GrapeCity.CalcEngine.CellReference,System.Text.StringBuilder)">
      <summary>Unparses the cell reference in A1 reference style.</summary>
      <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the cell reference.</param>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> object to store the cell reference in A1 refrence style.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseError(GrapeCity.CalcEngine.CalcError)">
      <summary>Unparses the specified <see cref="T:GrapeCity.CalcEngine.CalcError" /> value.</summary>
      <param name="error">A <see cref="T:GrapeCity.CalcEngine.CalcError" /> value indicates the calculation error.</param>
      <returns>A string value represents the calculation error text.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseR1C1Reference(GrapeCity.CalcEngine.RangeReference)">
      <summary>Unparses the range reference in R1C1 reference style.</summary>
      <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the range reference.</param>
      <returns>A <see cref="T:System.String" /> value represents the range reference in R1C1 reference style.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseR1C1Reference(GrapeCity.CalcEngine.RangeReference,System.Text.StringBuilder)">
      <summary>Unparses the range reference in R1C1 reference style.</summary>
      <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the range reference.</param>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> object to store the range reference in R1C1 refrence style.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseR1C1Reference(GrapeCity.CalcEngine.CellReference)">
      <summary>Unparses the cell reference in R1C1 reference style.</summary>
      <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the cell reference.</param>
      <returns>A <see cref="T:System.String" /> value represents the cell reference in R1C1 reference style.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseR1C1Reference(GrapeCity.CalcEngine.CellReference,System.Text.StringBuilder)">
      <summary>Unparses the cell reference in R1C1 reference style.</summary>
      <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the cell reference.</param>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> object to store the cell reference in R1C1 refrence style.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnstrictR1C1Boundary">
      <summary>Stops verifying whether the R1C1 reference is unbound or not.</summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.Function.#ctor(System.String,System.Int32,System.Int32,GrapeCity.CalcEngine.FunctionAttributes)">
      <summary>Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.Function" /> class.</summary>
      <param name="functionName">A string value represents the function name.</param>
      <param name="minArgs">An integer values indicates the minimum argument count.</param>
      <param name="maxArgs">An integer values indicates the maximum argument count.</param>
      <param name="functionAttr">A <see cref="T:GrapeCity.CalcEngine.FunctionAttributes" /> value indicates attributes of the function.</param>
    </member>
    <member name="P:GrapeCity.CalcEngine.Function.IsAttached">
      <summary>Gets a value indicating whether this function is attached to the workbookset.</summary>
      <value>
        <c>true</c> if this function is attached to the workbookset; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.Function.MaxArgs">
      <summary>Gets the maximum argument count of the function.</summary>
      <value>An integer value inciates the maximum argument count.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.Function.MinArgs">
      <summary>Gets the minimum argument count of the function.</summary>
      <value>An integer value inciates the minimum argument count.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.Function.Name">
      <summary>Gets the function name.</summary>
      <value>A <see cref="T:System.String" /> value indictes the function name.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.Function.Clone">
      <summary>Clones this function.</summary>
      <returns>A <see cref="T:GrapeCity.CalcEngine.Function" /> object represents the cloned function.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Function.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Function.Equals(GrapeCity.CalcEngine.Function)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.Function.Evaluate(GrapeCity.CalcEngine.IArguments,GrapeCity.CalcEngine.IValue)">
      <summary>Evaluates the function based on specified arguments and set evaluated value to <paramref name="result" />.</summary>
      <param name="arguments">The <see cref="T:GrapeCity.CalcEngine.IArguments" /> object indicates set of arguments.</param>
      <param name="result">The <see cref="T:GrapeCity.CalcEngine.IValue" /> object to set result value.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.Function.GetHashCode">
      <summary>Returns a hash code for this instance.</summary>
      <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.StringBuilderCache">
      <summary>Provide a cached reusable instance of stringbuilder per thread. It's an optimisation that reduces the number of instances constructed and collected. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.StringBuilderCache.Acquire(System.Int32)">
      <summary>Get a string builder to use of a particular size. It can be called any number of times, if a stringbuilder is in the cache then it will be returned and the cache emptied. subsequent calls will return a new stringbuilder.</summary>
      <param name="capacity">The capacity.</param>
      <returns>A StringBuilder instance is cached in Thread Local Storage and so there is one per thread</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.StringBuilderCache.GetStringAndRelease(System.Text.StringBuilder)">
      <summary>ToString() the stringbuilder, Release it to the cache and return the resulting string</summary>
      <param name="sb">The string builder.</param>
      <returns>System.String.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.StringBuilderCache.Release(System.Text.StringBuilder)">
      <summary>Place the specified builder in the cache if it is not too big. The stringbuilder should not be used after it has been released. Unbalanced Releases are perfectly acceptable. It will merely cause the runtime to create a new stringbuilder next time Acquire is called.</summary>
      <param name="sb">The string builder.</param>
    </member>
    <member name="T:GrapeCity.CalcEngine.SyntaxHighlight">
      <summary>Represents the syntax highlight information of a formula. This class cannot be inherited.</summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlight.Count">
      <summary>Gets the total number of highlight entries.</summary>
      <value>An integer value represents the total number of highlight entries.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlight.Formula">
      <summary>Gets the coressponding formula of this <see cref="T:GrapeCity.CalcEngine.SyntaxHighlight" /> value.</summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.SyntaxHighlight.Accept(GrapeCity.CalcEngine.ISyntaxHighlighter,System.Int32,System.Int32)">
      <summary>Accepts the specified syntax highlighter to process entries.</summary>
      <param name="syntaxHighlighter">The syntax highlighter.</param>
    </member>
    <member name="P:GrapeCity.CalcEngine.UnaryOperatorExpression.Expression">
      <summary>Gets or sets the expression.</summary>
      <value>The expression.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.UnaryOperatorExpression.ExpressionCount">
      <summary>Gets the total count of child expression(s).</summary>
      <value>An integer value indicates the total count of child expression(s).</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.UnaryOperatorExpression.Symbol">
      <summary>Gets the symbol of the operator.</summary>
      <value>A string value indicates the symbol of the operator.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.Equals(GrapeCity.CalcEngine.Expression)">
      <summary>Indicates whether the current <see cref="P:GrapeCity.CalcEngine.UnaryOperatorExpression.Expression" /> is equal to another <see cref="P:GrapeCity.CalcEngine.UnaryOperatorExpression.Expression" nolink="true" />.</summary>
      <param name="other">The other.</param>
      <returns>
        <c>true</c> if the current <see cref="P:GrapeCity.CalcEngine.UnaryOperatorExpression.Expression" /> is equal to the other <see cref="P:GrapeCity.CalcEngine.UnaryOperatorExpression.Expression" nolink="true" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.GetExpression(System.Int32)">
      <summary>Gets the expression at the specified location.</summary>
      <param name="index">An integer value indicates the location of expression.</param>
      <returns>The expression at the specified location.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.GetHashCode">
      <summary>Returns a hash code for this instance.</summary>
      <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.SetExpression(System.Int32,GrapeCity.CalcEngine.Expression)">
      <summary>Replaces the expression at the specified location.</summary>
      <param name="index">An integer value indicates the location of expression to replace.</param>
      <param name="expression">The expression to replace.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
      <summary>Unparses the current <see cref="T:GrapeCity.CalcEngine.UnaryOperatorExpression" /> to the formula text.</summary>
      <param name="engine">The parser to unparse.</param>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
    </member>
    <member name="T:GrapeCity.CalcEngine.CellReference">
      <summary>Represents a contextual cell reference.</summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellReference.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.CellReference" /> struct which represents an absolute cell reference.</summary>
      <param name="row">An integer indicates the index of the row.</param>
      <param name="column">An integer indicates the index of the column.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellReference.#ctor(System.Int32,System.Int32,GrapeCity.CalcEngine.CellRelation)">
      <summary>Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.CellReference" /> struct.</summary>
      <param name="row">An integer indicates the index of the row.</param>
      <param name="column">An integer indicates the index of the column.</param>
      <param name="relation">A <see cref="P:GrapeCity.CalcEngine.CellReference.Relation" /> value indicates the relative of this <see cref="T:GrapeCity.CalcEngine.CellReference" /> with the source.</param>
    </member>
    <member name="F:GrapeCity.CalcEngine.CellReference.Empty">
      <summary>Empty CellReference instance. This field is read-only.</summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.CellReference.Column">
      <summary>Gets the index of the column.</summary>
      <value>An integer represents the index of the column.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.CellReference.Relation">
      <summary>Gets the relative of this <see cref="T:GrapeCity.CalcEngine.CellReference" /> with the source.</summary>
      <value>A <see cref="P:GrapeCity.CalcEngine.CellReference.Relation" /> value represents the relative of this <see cref="T:GrapeCity.CalcEngine.CellReference" /> with the source.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.CellReference.Row">
      <summary>Gets the index of the row.</summary>
      <value>An integer represents the index of the row.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellReference.CompareTo(GrapeCity.CalcEngine.CellReference)">
      <summary>Compares the current <see cref="T:GrapeCity.CalcEngine.CellReference" /> with another <see cref="T:GrapeCity.CalcEngine.CellReference" nolink="true" />.</summary>
      <param name="other">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> to compare with this <see cref="T:GrapeCity.CalcEngine.CellReference" nolink="true" />.</param>
      <returns>A value that indicates the relative order of the <see cref="T:GrapeCity.CalcEngine.CellReference" /> values being compared. The return value has the following meanings: Less than zero: This object is less than the other parameter. Zero: This object is equal to other. Greater than zero: This object is greater than other.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellReference.Equals(GrapeCity.CalcEngine.CellReference)">
      <summary>Indicates whether the current <see cref="T:GrapeCity.CalcEngine.CellReference" /> is equal to another <see cref="T:GrapeCity.CalcEngine.CellReference" nolink="true" /> of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.CellReference" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.CellReference" nolink="true" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellReference.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.</summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellReference.GetHashCode">
      <summary>Returns a hash code for this instance.</summary>
      <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellReference.ToAbsolute(System.Int32,System.Int32)">
      <summary>Returns the absolute reference of the <see cref="T:GrapeCity.CalcEngine.CellReference" /> object which relates with the context cell (specified by <paramref name="contextRow" /> and <paramref name="contextColumn" />.</summary>
      <param name="contextRow">An integer indicates the row index of context cell.</param>
      <param name="contextColumn">An integer indicates the column index of context cell.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellReference.ToRelative(System.Int32,System.Int32)">
      <summary>Returns the target reference of the <see cref="T:GrapeCity.CalcEngine.CellReference" /> object which relates with the context cell (specified by <paramref name="contextRow" /> and <paramref name="contextColumn" />. Position state of the <see cref="T:GrapeCity.CalcEngine.CellReference" nolink="true" /> is unchanged.</summary>
      <param name="contextRow">An integer value indicates the context row index.</param>
      <param name="contextColumn">An integer value indicates the context column index.</param>
      <returns>A <see cref="T:GrapeCity.CalcEngine.CellReference" /> indicates the target location.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellReference.op_Equality(GrapeCity.CalcEngine.CellReference,GrapeCity.CalcEngine.CellReference)">
      <summary>Returns whether two <see cref="T:GrapeCity.CalcEngine.CellReference" /> are equals.</summary>
      <param name="cell1">The fisrt <see cref="T:GrapeCity.CalcEngine.CellReference" /> value to compare.</param>
      <param name="cell2">The second <see cref="T:GrapeCity.CalcEngine.CellReference" /> value to compare.</param>
      <returns>
        <c>true</c> if two values are equals; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.CellReference.op_Inequality(GrapeCity.CalcEngine.CellReference,GrapeCity.CalcEngine.CellReference)">
      <summary>Returns whether two <see cref="T:GrapeCity.CalcEngine.CellReference" /> are not equals.</summary>
      <param name="cell1">The fisrt <see cref="T:GrapeCity.CalcEngine.CellReference" /> value to compare.</param>
      <param name="cell2">The second <see cref="T:GrapeCity.CalcEngine.CellReference" /> value to compare.</param>
      <returns>
        <c>true</c> if two values are not equals; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.RangeReference">
      <summary>Represents a contextual range reference.</summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.#ctor(System.Int32,System.Int32,GrapeCity.CalcEngine.CellRelation)">
      <summary>Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.RangeReference" /> struct.</summary>
      <param name="row">An integer value indicates the row index.</param>
      <param name="column">An integer value indicates the column index.</param>
      <param name="position">A <see cref="T:GrapeCity.CalcEngine.CellRelation" /> value indicates whether the reference is relative and/or absolute.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.RangeReference" /> struct.</summary>
      <param name="row">An integer value indicates the absolute top row index.</param>
      <param name="column">An integer value indicates the absolute left column index.</param>
      <param name="row2">An integer value indicates the absolute bottom row index.</param>
      <param name="column2">An integer value indicates the absolute right column index.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.#ctor(System.Int32,System.Int32,GrapeCity.CalcEngine.CellRelation,System.Int32,System.Int32,GrapeCity.CalcEngine.CellRelation)">
      <summary>Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.RangeReference" /> struct.</summary>
      <param name="row">An integer value indicates the top row index.</param>
      <param name="column">An integer value indicates the left column index.</param>
      <param name="topLeftPosition">A <see cref="T:GrapeCity.CalcEngine.CellRelation" /> value indicates whether the top-left reference is relative and/or absolute.</param>
      <param name="row2">An integer value indicates the bottom row index.</param>
      <param name="column2">An integer value indicates the right column index.</param>
      <param name="bottomRightPosition">A <see cref="T:GrapeCity.CalcEngine.CellRelation" /> value indicates whether the bottom-right reference is relative and/or absolute.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.#ctor(GrapeCity.CalcEngine.CellReference,GrapeCity.CalcEngine.CellReference)">
      <summary>Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.RangeReference" /> struct.</summary>
      <param name="topLeft">The top left reference.</param>
      <param name="bottomRight">The bottom right reference.</param>
    </member>
    <member name="P:GrapeCity.CalcEngine.RangeReference.BottomRight">
      <summary>Gets the bottom-right cell reference.</summary>
      <value>A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value represents the bottom-right cell reference.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.RangeReference.Column">
      <summary>Gets the index of the left column.</summary>
      <value>An integer represents the index of the left column.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.RangeReference.Column2">
      <summary>Gets the index of the right column.</summary>
      <value>An integer represents the index of the right column.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.RangeReference.Row">
      <summary>Gets the index of the top row.</summary>
      <value>An integer represents the index of the top row.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.RangeReference.Row2">
      <summary>Gets the index of the bottom row.</summary>
      <value>An integer represents the index of the bottom row.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.RangeReference.TopLeft">
      <summary>Gets the top-left cell reference.</summary>
      <value>A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value represents the top-left cell reference.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.CompareTo(GrapeCity.CalcEngine.RangeReference)">
      <summary>Compares the current <see cref="T:GrapeCity.CalcEngine.RangeReference" /> with another <see cref="T:GrapeCity.CalcEngine.RangeReference" nolink="true" />.</summary>
      <param name="other">A <see cref="T:GrapeCity.CalcEngine.RangeReference" /> to compare with this <see cref="T:GrapeCity.CalcEngine.RangeReference" nolink="true" />.</param>
      <returns>A value that indicates the relative order of the <see cref="T:GrapeCity.CalcEngine.RangeReference" /> values being compared. The return value has the following meanings: Less than zero: This object is less than the other parameter. Zero: This object is equal to other. Greater than zero: This object is greater than other.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.Equals(GrapeCity.CalcEngine.RangeReference)">
      <summary>Indicates whether the current <see cref="T:GrapeCity.CalcEngine.RangeReference" /> is equal to another <see cref="T:GrapeCity.CalcEngine.RangeReference" nolink="true" /> of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.RangeReference" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.RangeReference" nolink="true" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.</summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.GetHashCode">
      <summary>Returns a hash code for this instance.</summary>
      <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.IntersectWith(GrapeCity.CalcEngine.RangeReference@)">
      <summary>Intersects this <see cref="T:GrapeCity.CalcEngine.RangeReference" /> range with the specified <see cref="T:GrapeCity.CalcEngine.RangeReference" nolink="true" /> range.</summary>
      <param name="range">The <see cref="T:GrapeCity.CalcEngine.RangeReference" /> range to intersect with.</param>
      <returns>A <see cref="T:GrapeCity.CalcEngine.RangeReference" /> range represents the intersected <see cref="T:GrapeCity.CalcEngine.RangeReference" nolink="true" /> range.</returns>
      <remarks>Make sure that all rows and columns are all absolute or relative.</remarks>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.IsEmpty">
      <summary>Determines whether this instance is empty.</summary>
      <returns>
        <c>true</c> if this instance is empty; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.IsIntersected(GrapeCity.CalcEngine.RangeReference@)">
      <summary>Determines whether this reference is intersected with the specified reference.</summary>
      <param name="rangeReference">The range reference.</param>
      <returns>
        <c>true</c> if this reference is intersected with the specified reference; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.IsIntersected(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether this reference is intersected with the specified reference.</summary>
      <param name="row">An integer value indicates the top row index of cell range.</param>
      <param name="column">An integer value indicates the left column index of cell range.</param>
      <param name="row2">An integer value indicates the bottom row index of cell range.</param>
      <param name="column2">An integer value indicates the right column index of cell range.</param>
      <returns>
        <c>true</c> if the specified row is intersected; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.IsOneCell">
      <summary>Gets a value indicating whether this reference is one cell.</summary>
      <returns>
        <c>true</c> if this reference is one cell; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.Offset(System.Int32,System.Int32)">
      <summary>Translates this <seealso cref="T:GrapeCity.CalcEngine.RangeReference" /> by the specified amount.</summary>
      <param name="translateRows">The amount to offset the y-coordinate.</param>
      <param name="translateColumns">&gt;The amount to offset the x-coordinate.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.ToAbsolute(System.Int32,System.Int32)">
      <summary>Returns the absolute reference of the <see cref="T:GrapeCity.CalcEngine.RangeReference" /> object which relates with the context cell (specified by <paramref name="contextRow" /> and <paramref name="contextColumn" />.</summary>
      <param name="contextRow">An integer indicates the row index of context cell.</param>
      <param name="contextColumn">An integer indicates the column index of context cell.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.ToAbsolute">
      <summary>Removes relate reference flag(s) to get the absolute reference.</summary>
      <returns>A <see cref="!:RangeReference." /> value represents the absolute reference of this reference.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.RangeReference.ToRelative(System.Int32,System.Int32)">
      <summary>Returns the target reference of the <see cref="T:GrapeCity.CalcEngine.RangeReference" /> object which relates with the context cell (specified by <paramref name="contextRow" /> and <paramref name="contextColumn" />. Position state of the <see cref="T:GrapeCity.CalcEngine.RangeReference" nolink="true" /> is unchanged.</summary>
      <param name="contextRow">An integer indicates the row index of context cell.</param>
      <param name="contextColumn">An integer indicates the column index of context cell.</param>
    </member>
    <member name="T:GrapeCity.CalcEngine.SyntaxHighlightEntry">
      <summary>Represents the syntax highlight information at the specified position of formula.</summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.ArgbColor">
      <summary>Gets the ARGB color value of this highlight entry.</summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.CharIndex">
      <summary>Gets the start character index of this <see cref="T:GrapeCity.CalcEngine.SyntaxHighlightEntry" /> in the formula.</summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.CharLength">
      <summary>Gets the character length of this <see cref="T:GrapeCity.CalcEngine.SyntaxHighlightEntry" /> in the formula.</summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.Count">
      <summary>Gets the total number of arguments.</summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.FirstSource">
      <summary>Gets the first coressponding reference of this entry.</summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.Function">
      <summary>Gets the corresponding <see cref="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.Function" /> object of this highlight entry.</summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.IsColorized">
      <summary>Gets a boolean value indicates whether the syntax highlight entry should be colorized.</summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.Item(System.Int32)">
      <summary>Gets the <see cref="T:GrapeCity.CalcEngine.SyntaxHighlightEntry" /> value at the specified argument index.</summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.LastSource">
      <summary>Gets the last coressponding reference of this entry.</summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.Reference">
      <summary>Gets the coressponding reference of this entry.</summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.IArguments">
      <summary>Represents a set of arguments which are passed to a function.</summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.IArguments.Count">
      <summary>Gets the total count of arguments.</summary>
      <value>An integer value indicates the total count of arguments.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IArguments.EvaluationContext">
      <summary>Gets an <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> instance indicates the evaluation context.</summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.IArguments.Item(System.Int32)">
      <summary>Gets the <see cref="T:GrapeCity.CalcEngine.IValue" /> argument at the specified index.</summary>
      <param name="index">An integer value indicates the index of argument.</param>
      <value>An <see cref="T:GrapeCity.CalcEngine.IValue" /> instance indicates value of the specified argument.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.IArguments.GetArrayValue(System.Int32,System.Int32,System.Int32,GrapeCity.CalcEngine.IPrimitiveValue)">
      <summary>Gets the value of an item in the array argument.</summary>
      <param name="index">An integer value indicates the index of argument.</param>
      <param name="row">An integer value indicates the row array index of item.</param>
      <param name="column">An integer value indicates the column array index of item.</param>
      <param name="result">An <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> instance to store value of the specified item in the array argument.</param>
    </member>
    <member name="T:GrapeCity.CalcEngine.IAsyncFunctionManager">
      <summary>Represents an asynchronous function manager which handles processing after asynchronous function(s) finished.</summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.IAsyncFunctionManager.OnDataChanged(GrapeCity.CalcEngine.AsyncApplication)">
      <summary>Called when asynchronous function(s) finished.</summary>
      <param name="asyncApplication">An <see cref="T:GrapeCity.CalcEngine.AsyncApplication" /> object indicates the asynchronous function application.</param>
    </member>
    <member name="T:GrapeCity.CalcEngine.IEvaluationContext">
      <summary>An interface which the evaluation-enabled class must derived from.</summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.IEvaluationContext.ContextColumn">
      <summary>Gets the column index of the cell whose formula is being evaluated.</summary>
      <value>An zero-based integer indicates the column index of the cell.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IEvaluationContext.ContextRow">
      <summary>Gets the row index of the cell whose formula is being evaluated.</summary>
      <value>An zero-based integer indicates the row index of the cell.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IEvaluationContext.Error">
      <summary>Gets or sets the calculation error.</summary>
      <value>The calculation error value.</value>
      <remarks>The first calculation error will has highest priority. It will be kept until the calculation error is clear.</remarks>
    </member>
    <member name="P:GrapeCity.CalcEngine.IEvaluationContext.ReferenceSource">
      <summary>Gets the reference source where the formula is being evaluated.</summary>
      <value>An <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object represents where the formula is being evaluated.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.IEvaluationContext.AllocValue">
      <summary>Allocates a new <see cref="T:GrapeCity.CalcEngine.IValue" /> object.</summary>
      <returns>The new allocated <see cref="T:GrapeCity.CalcEngine.IValue" /> object.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IEvaluationContext.AllocValue(System.Int32)">
      <summary>Allocates multiple <see cref="T:GrapeCity.CalcEngine.IValue" /> objects.</summary>
      <param name="count">The total number of <see cref="T:GrapeCity.CalcEngine.IValue" /> objects to allocate.</param>
      <returns>An zero-based interger indicates the index of first allocated <see cref="T:GrapeCity.CalcEngine.IValue" /> object.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IEvaluationContext.DeallocValue">
      <summary>Deallocates the last created <see cref="T:GrapeCity.CalcEngine.IValue" /> object.</summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.IEvaluationContext.DeallocValue(System.Int32)">
      <summary>Deallocates the last created <see cref="T:GrapeCity.CalcEngine.IValue" /> objects.</summary>
      <param name="count">The total number of <see cref="T:GrapeCity.CalcEngine.IValue" /> objects to deallocate.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IEvaluationContext.EnterContext(GrapeCity.CalcEngine.IReferenceSource,System.Int32,System.Int32)">
      <summary>Enters the specified evaluating context.</summary>
      <param name="source">The <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object which is using formula.</param>
      <param name="contextRow">An integer value indicates the context row index.</param>
      <param name="contextColumn">An integer value indicates the context column index.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IEvaluationContext.Evaluate(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.IValue)">
      <summary>Evaluates the specified expression and returns the evaluated result via <paramref name="result" /> parameter.</summary>
      <param name="expression">The expression to evaluate.</param>
      <param name="result">The <see cref="T:GrapeCity.CalcEngine.IValue" /> object to keep evaluated result.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IEvaluationContext.ExitContext">
      <summary>Exits from the current evaluating context back to the previous evaluating context.</summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.IEvaluationContext.GetValue(System.Int32)">
      <summary>Get the <see cref="T:GrapeCity.CalcEngine.IValue" /> object at the specified index.</summary>
      <param name="index">The zero-based integer indicates the index of <see cref="T:GrapeCity.CalcEngine.IValue" /> object.</param>
      <returns>IValue.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.IFunctionResolver">
      <summary>Represents an interface that resolve functions.</summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.IFunctionResolver.Resolve(System.String)">
      <summary>Resolves a function from the specified name.</summary>
      <param name="name">A string value indicates the function name.</param>
      <returns>A <see cref="T:GrapeCity.CalcEngine.Function" /> object represents the parsed function.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.IOperatorResolver">
      <summary>Represents an interface which allows to override the behavior of operators.</summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.IOperatorResolver.Resolve(GrapeCity.CalcEngine.FormulaEngine,GrapeCity.CalcEngine.OperatorType,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression)">
      <summary>Resolves the parsing operator.</summary>
      <param name="opType">An <see cref="T:GrapeCity.CalcEngine.OperatorType" /> value indicates the operator.</param>
      <param name="leftArg">An <see cref="T:GrapeCity.CalcEngine.Expression" /> object indicates the left argument expression.</param>
      <param name="rightArg">An <see cref="T:GrapeCity.CalcEngine.Expression" /> object indicates the right argument expression.</param>
      <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
    </member>
    <member name="T:GrapeCity.CalcEngine.IPrimitiveValue">
      <summary>Represents an interfaces for a calculated primitive value of calculation engine.</summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.CompareTo(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.IPrimitiveValue)">
      <summary>Compares this instance to a specified <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> object and returns an indication of their relative values.</summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
      <param name="value">An <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> object idnicates the value to compare with.</param>
      <returns>A signed number indicating the relative values of this instance and value.Return Value Description Less than zero This instance is less than value. Zero This instance is equal to value. Greater than zero This instance is greater than value.-or- value is null.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.Reset">
      <summary>Resets this <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> object to empty.</summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.SetValue(GrapeCity.CalcEngine.IEvaluationContext,System.Double)">
      <summary>Sets the <see cref="T:System.Double" /> value.</summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
      <param name="value">The <see cref="T:System.Double" /> value to set.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.SetValue(System.Object)">
      <summary>Sets the <see cref="T:System.Object" /> value.</summary>
      <param name="value">The <see cref="T:System.Object" /> value to set.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.SetValue(GrapeCity.CalcEngine.CalcError)">
      <summary>Sets the <see cref="T:GrapeCity.CalcEngine.CalcError" /> value.</summary>
      <param name="value">The <see cref="T:GrapeCity.CalcEngine.CalcError" /> value to set.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.SetValue(GrapeCity.CalcEngine.IEvaluationContext,System.String)">
      <summary>Sets the <see cref="T:System.String" /> value.</summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
      <param name="value">The <see cref="T:System.String" /> value to set.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.SetValue(System.Boolean)">
      <summary>Sets the <see cref="T:System.Boolean" /> value.</summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to set.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.SetValue(System.DateTime)">
      <summary>Sets the <see cref="T:System.DateTime" /> value.</summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to set.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.SetValue(System.TimeSpan)">
      <summary>Sets the <see cref="T:System.TimeSpan" /> value.</summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to set.</param>
    </member>
    <member name="T:GrapeCity.CalcEngine.IReadonlyPrimitiveValue">
      <summary>Represents an interfaces for a calculated primitive value of calculation engine.</summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.IReadonlyPrimitiveValue.ValueType">
      <summary>Gets the value type of this <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> instance.</summary>
      <value>The type of the data of the <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> instance.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReadonlyPrimitiveValue.GetDate(GrapeCity.CalcEngine.IEvaluationContext)">
      <summary>Gets the <see cref="T:System.DateTime" /> value.</summary>
      <param name="context">The evaluation context to get value.</param>
      <returns>An <see cref="T:System.DateTime" /> value.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReadonlyPrimitiveValue.GetError(GrapeCity.CalcEngine.IEvaluationContext)">
      <summary>Gets the <see cref="T:GrapeCity.CalcEngine.CalcError" /> value.</summary>
      <param name="context">The evaluation context to get value.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.CalcError" /> value.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReadonlyPrimitiveValue.GetLogical(GrapeCity.CalcEngine.IEvaluationContext)">
      <summary>Gets the <see cref="T:System.Boolean" /> value.</summary>
      <param name="context">The evaluation context to get value.</param>
      <returns>An <see cref="T:System.Boolean" /> value.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReadonlyPrimitiveValue.GetNumber(GrapeCity.CalcEngine.IEvaluationContext)">
      <summary>Gets the <see cref="T:System.Double" /> value.</summary>
      <param name="context">The evaluation context to get value.</param>
      <returns>An <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReadonlyPrimitiveValue.GetText(GrapeCity.CalcEngine.IEvaluationContext)">
      <summary>Gets the <see cref="T:System.String" /> value.</summary>
      <param name="context">The evaluation context to get value.</param>
      <returns>An <see cref="T:System.String" /> value.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReadonlyPrimitiveValue.GetTime(GrapeCity.CalcEngine.IEvaluationContext)">
      <summary>Gets the <see cref="T:System.TimeSpan" /> value.</summary>
      <param name="context">The evaluation context to get value.</param>
      <returns>An <see cref="T:System.TimeSpan" /> value.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.IReferenceSource">
      <summary>Indicates the source of a cell reference or range reference</summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.IReferenceSource.ColumnCount">
      <summary>Gets the number of columns in this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.</summary>
      <value>An integer value represents the number of columns in this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IReferenceSource.Name">
      <summary>Gets the name of this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.</summary>
      <value>A string value represents the name of this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IReferenceSource.RowCount">
      <summary>Gets the number of rows in this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.</summary>
      <value>An integer value represents the number of rows in this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IReferenceSource.Supports3DReference">
      <summary>Gets a value indicating whether this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object supports 3D-Reference.</summary>
      <value>
        <c>true</c> if this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object supports 3D-Reference; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReferenceSource.Get3DReferenceIndex">
      <summary>Get the 3D-Reference index of this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object.</summary>
      <returns>An integer value indicates the 3D-Reference index of this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReferenceSource.GetReferenceExpression(GrapeCity.CalcEngine.FormulaEngine)">
      <summary>Gets the reference expression to evaluate this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.</summary>
      <param name="formulaEngine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula engine.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the reference expression to evaluate this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReferenceSource.GetValue(GrapeCity.CalcEngine.IEvaluationContext,System.Int32,System.Int32,GrapeCity.CalcEngine.IPrimitiveValue)">
      <summary>Gets the value at the specified location of the 2-dimensions matrix.</summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
      <param name="row">An integer value indicates the row index of the 2-dimensions matrix.</param>
      <param name="column">An integer value indicates the column index of the 2-dimensions matrix.</param>
      <param name="result">An <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> object represents the value at the specified location.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IReferenceSource.IsUndefined">
      <summary>Determines whether this reference source is undefined.</summary>
      <returns>
        <c>true</c> if this reference source is undefined; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.IStructuredObject">
      <summary>Represents a structured object which stores data as a spreadsheet.</summary>
      <seealso cref="!:System.IEquatable&lt;GrapeCity.CalcEngine.IStructuredObject&gt;" />
    </member>
    <member name="P:GrapeCity.CalcEngine.IStructuredObject.HeaderRowCount">
      <summary>Gets the header row count.</summary>
      <value>An integer values represents the header row count.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IStructuredObject.Name">
      <summary>Gets the name of <see cref="T:GrapeCity.CalcEngine.IStructuredObject" /> object.</summary>
      <value>A string value represents the name of <see cref="T:GrapeCity.CalcEngine.IStructuredObject" /> object.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IStructuredObject.Range">
      <summary>Gets the range reference of the structured object.</summary>
      <value>A <see cref="T:GrapeCity.CalcEngine.RangeReference" /> value represents the range of structured object.</value>
      <remarks>The <see cref="T:GrapeCity.CalcEngine.RangeReference" /> value must be absolute reference.</remarks>
    </member>
    <member name="P:GrapeCity.CalcEngine.IStructuredObject.ReferenceSource">
      <summary>Gets the <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object which contains the <see cref="T:GrapeCity.CalcEngine.IStructuredObject" /> object.</summary>
      <value>The <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object which contains the <see cref="T:GrapeCity.CalcEngine.IStructuredObject" /> object.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IStructuredObject.TotalsRowCount">
      <summary>Gets the totals row count.</summary>
      <value>An integer value represents the totals row count.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.IStructuredObject.GetColumnId(System.String)">
      <summary>Gets the relative column index of the specified column.</summary>
      <param name="columnName">A string value indicates the specified column.</param>
      <returns>An integer value indicates the relative column index.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IStructuredObject.GetColumnIndex(System.Int32)">
      <summary>Get the table column index of the specified column.</summary>
      <param name="id">An integer value indicates the column unique ID inside the structure object.</param>
      <returns>An <see cref="T:System.Int32" /> value represents the table column index of the specified column.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IStructuredObject.GetColumnName(System.Int32)">
      <summary>Gets the table column name of the specified column.</summary>
      <param name="id">An integer value indicates the column unique ID inside the structure object.</param>
      <returns>A string indicates the column name.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IStructuredObject.IsUndefined">
      <summary>Determines whether this <see cref="T:GrapeCity.CalcEngine.IStructuredObject" /> object is undefined.</summary>
      <returns>
        <c>true</c> if this <see cref="T:GrapeCity.CalcEngine.IStructuredObject" /> object is undefined; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IStructuredObject.SetColumnName(System.Int32,System.String)">
      <summary>Gets the table column name of the specified column.</summary>
      <param name="index">An integer value indicates the table column index.</param>
      <param name="columnName">A string value indicates the specified column.</param>
    </member>
    <member name="T:GrapeCity.CalcEngine.ISymbolResolver">
      <summary>Represents an interface that resolve symbols.</summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.ISymbolResolver.GetUndefinedExpression(GrapeCity.CalcEngine.FormulaEngine,System.String)">
      <summary>Resolves an undefined expression from the sepecified symbol.</summary>
      <param name="symbol">A string value indicates the symbol.</param>
      <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> object represents the parsed expression.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.ISymbolResolver.Resolve(GrapeCity.CalcEngine.FormulaEngine,System.Char*,System.Int32,System.Int32)">
      <summary>Resolves an expression from the sepecified symbol.</summary>
      <param name="formula">A character array indicates the formula text.</param>
      <param name="index">An integer value indicates the start index of the symbol.</param>
      <param name="length">An integer value indicates the length of the symbol.</param>
      <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> object represents the parsed expression.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.ISymbolResolver.Resolve(GrapeCity.CalcEngine.FormulaEngine,System.String)">
      <summary>Resolves an expression from the sepecified symbol.</summary>
      <param name="symbol">A string value indicates the symbol name.</param>
      <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> object represents the parsed expression.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.ISymbolResolver.ResolveReferenceSource(GrapeCity.CalcEngine.FormulaEngine,System.String,System.String,System.String)">
      <summary>Resolves the reference source from the specified path, book name and reference source name.</summary>
      <param name="path">A string value indicates the book path.</param>
      <param name="bookName">A string value indicates the book name.</param>
      <param name="refSourceName">A string value indicates the reference source.</param>
      <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> object represents the parsed expression.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.ISymbolResolver.ResolveReferenceSource(GrapeCity.CalcEngine.FormulaEngine,System.Int32,System.String)">
      <summary>Resolves the reference source from the specified book index and reference source name.</summary>
      <param name="bookIndex">An integer value indicates the book index.</param>
      <param name="refSourceName">A string value indicates the reference source.</param>
      <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> object represents the parsed expression.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.ISymbolResolver.ResolveStructuredObject(GrapeCity.CalcEngine.FormulaEngine,System.Char*,System.Int32,System.Int32)">
      <summary>Resolves the structured object from the specified object name.</summary>
      <param name="formula">A character array indicates the formula text.</param>
      <param name="index">An integer value indicates the start index of the object name.</param>
      <param name="length">An integer value indicates the length of the object name.</param>
      <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> object represents the parsed expression.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.ISymbolResolver.ResolveStructuredObject(GrapeCity.CalcEngine.FormulaEngine,System.Int32,System.Int32)">
      <summary>Resolves the structured object from the specified cell location.</summary>
      <param name="row">An integer value indicates the context row.</param>
      <param name="column">An integer value indicates the context column.</param>
      <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> object represents the parsed expression.</returns>
    </member>
    <member name="T:GrapeCity.CalcEngine.ISyntaxHighlighter">
      <summary>Represents the syntax highlighter that perform highlighting.</summary>
    </member>
    <member name="M:GrapeCity.CalcEngine.ISyntaxHighlighter.Visit(GrapeCity.CalcEngine.SyntaxHighlight,GrapeCity.CalcEngine.SyntaxHighlightEntry@)">
      <summary>Visits the specified syntax highlight entry.</summary>
      <param name="syntaxHighlight">The syntax highlight.</param>
      <param name="syntaxHighlightEntry">The syntax highlight entry to process.</param>
    </member>
    <member name="T:GrapeCity.CalcEngine.IValue">
      <summary>Represents an interfaces for a calculated value of calculation engine.</summary>
      <seealso cref="T:GrapeCity.CalcEngine.IPrimitiveValue" />
    </member>
    <member name="P:GrapeCity.CalcEngine.IValue.ReferenceCount">
      <summary>Gets the reference count.</summary>
      <value>An integer values represents the reference count.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IValue.ValueType">
      <summary>Gets the value type of this <see cref="T:GrapeCity.CalcEngine.IValue" /> instance.</summary>
      <value>The type of the data of the <see cref="T:GrapeCity.CalcEngine.IValue" /> instance.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.CopyReferenceTo(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.RangeReference[],System.Int32)">
      <summary>Copies all references to an array at the specified position.</summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> value indicates the evaluation context.</param>
      <param name="array">The array to copy to.</param>
      <param name="index">An integer value indicates the position in the array.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.CreateValuesArray(System.Int32,System.Int32)">
      <summary>Creates a new values array.</summary>
      <param name="rowCount">An integer value indicates the row count of values array.</param>
      <param name="columnCount">An integer value indicates the column count of values array.</param>
      <returns>A <see cref="T:GrapeCity.CalcEngine.IValuesArray" /> value represents the values array value.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.GetColumnCount(GrapeCity.CalcEngine.IEvaluationContext)">
      <summary>Gets the column count of the evaluated range reference.</summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
      <returns>An integer value represents the column count of the evaluated range reference.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.GetPrimitiveValue(GrapeCity.CalcEngine.IEvaluationContext)">
      <summary>Get primitive value from this <see cref="T:GrapeCity.CalcEngine.IValue" /> object.</summary>
      <returns>An <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> instance referred by this <see cref="T:GrapeCity.CalcEngine.IValue" /> object.</returns>
      <remarks>After this function is invoked, there is no guarranty that this object keeps unchanged.</remarks>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.GetReference(GrapeCity.CalcEngine.IEvaluationContext,System.Int32)">
      <summary>Gets the reference at the specified position.</summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> value indicates the evaluation context.</param>
      <param name="index">An integer value indicates the position in the array.</param>
      <returns>A <see cref="!:RangeReference." /> value represents the reference at the specified position.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.GetReferenceSource(GrapeCity.CalcEngine.IEvaluationContext)">
      <summary>Gets the reference source.</summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> value indicates the evaluation context.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> objects indicates the reference source.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.GetReferenceSource2(GrapeCity.CalcEngine.IEvaluationContext)">
      <summary>Gets the end reference source.</summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> value indicates the evaluation context.</param>
      <returns>An <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> objects indicates the end reference source.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.GetRowCount(GrapeCity.CalcEngine.IEvaluationContext)">
      <summary>Gets the row count of the evaluated range reference.</summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
      <returns>An integer value represents the row count of the evaluated range reference.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.GetValuesArray">
      <summary>Gets the values array value.</summary>
      <returns>A <see cref="T:GrapeCity.CalcEngine.IValuesArray" /> value represents the values array value.</returns>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.SetReference(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.CellReference,GrapeCity.CalcEngine.IReferenceSource)">
      <summary>Sets the value of this <see cref="T:GrapeCity.CalcEngine.IValue" /> to the specified cell reference.</summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> value indicates the evaluation context.</param>
      <param name="cellRef">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the cell reference.</param>
      <param name="refSource">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> value indicates the reference source.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.SetReference(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.RangeReference,GrapeCity.CalcEngine.IReferenceSource)">
      <summary>Sets the value of this <see cref="T:GrapeCity.CalcEngine.IValue" /> to the specified reference.</summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> value indicates the evaluation context.</param>
      <param name="rangeRef">A <see cref="T:GrapeCity.CalcEngine.RangeReference" /> value indicates the range reference.</param>
      <param name="refSource">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> value indicates the reference source.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.SetReference(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.RangeReference[],GrapeCity.CalcEngine.IReferenceSource)">
      <summary>Sets the value of this <see cref="T:GrapeCity.CalcEngine.IValue" /> to the specified reference array.</summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> value indicates the evaluation context.</param>
      <param name="rangeRefs">An array of <see cref="T:GrapeCity.CalcEngine.RangeReference" /> represents the range references.</param>
      <param name="refSource">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> value indicates the reference source.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.SetReference(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.RangeReference,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.IReferenceSource)">
      <summary>Sets the value of this <see cref="T:GrapeCity.CalcEngine.IValue" /> to the specified 3D-reference.</summary>
      <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> value indicates the evaluation context.</param>
      <param name="rangeRefs">An array of <see cref="T:GrapeCity.CalcEngine.RangeReference" /> represents the range references.</param>
      <param name="startRefSource">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> value indicates the start reference source.</param>
      <param name="endRefSource">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> value indicates the end reference source.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValue.SetValue(GrapeCity.CalcEngine.IValuesArray)">
      <summary>Sets the value of this <see cref="T:GrapeCity.CalcEngine.IValue" /> to the specified <see cref="T:GrapeCity.CalcEngine.IValuesArray" />.</summary>
      <param name="valuesArray">An <see cref="T:GrapeCity.CalcEngine.IValuesArray" /> value represents the new value.</param>
    </member>
    <member name="T:GrapeCity.CalcEngine.IValuesArray">
      <summary>Represents a 2-dimensions array of values.</summary>
    </member>
    <member name="P:GrapeCity.CalcEngine.IValuesArray.ColumnCount">
      <summary>Gets the column count of this <see cref="T:GrapeCity.CalcEngine.IValuesArray" />.</summary>
      <value>An integer value represents the column count of this <see cref="T:GrapeCity.CalcEngine.IValuesArray" />.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IValuesArray.Item(System.Int32,System.Int32)">
      <summary>Gets the <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> at the specified row and column.</summary>
      <param name="row">An integer value indicates the row index.</param>
      <param name="column">An integer value indicates the column index.</param>
      <value>IPrimitiveValue.</value>
    </member>
    <member name="P:GrapeCity.CalcEngine.IValuesArray.RowCount">
      <summary>Gets the row count of this <see cref="T:GrapeCity.CalcEngine.IValuesArray" />.</summary>
      <value>An integer value represents the row count of this <see cref="T:GrapeCity.CalcEngine.IValuesArray" />.</value>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValuesArray.Resize(System.Int32,System.Int32)">
      <summary>Resizes this <see cref="T:GrapeCity.CalcEngine.IValuesArray" /> to specified row count and column count.</summary>
      <param name="rowCount">The total number of rows.</param>
      <param name="columnCount">The total number of columns.</param>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValuesArray.SetValue(System.Object)">
      <summary>Sets values to this <see cref="T:GrapeCity.CalcEngine.IValuesArray" /> object.</summary>
      <param name="values">The object that contains one or many values.</param>
      <returns>
        <c>true</c> if values are set, <c>false</c> otherwise.</returns>
      <remarks>If <paramref name="values" /> is an array, its elements will be set to the corresponding element of this <see cref="T:GrapeCity.CalcEngine.IValuesArray" /> object. Otherwise, the same value will be set to all elements.</remarks>
    </member>
    <member name="M:GrapeCity.CalcEngine.IValuesArray.Transpose">
      <summary>Transposes the rows and columns of this <see cref="T:GrapeCity.CalcEngine.IValuesArray" />.</summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.BuiltinFunction">
      <summary>Represents all supported built-in functions.</summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.CalcError">
      <summary>Represents a calculation error.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.None">
      <summary>There is no error. This value is used internally.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.Null">
      <summary>#NULL!</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.DivideByZero">
      <summary>#DIV/0!</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.Value">
      <summary>#VALUE!</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.Reference">
      <summary>#REF!</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.Name">
      <summary>#NAME!</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.Number">
      <summary>#NUM!</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.NotAvailable">
      <summary>#N/A!</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.CalcError.GettingData">
      <summary>#GETTING_DATA</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.SingleCell">
      <summary>Indicates whether the function process array formula as single-cell formulas. Some functions like SUM, COUNT... will process array formula as single-cell formulas. Others will process array formula as multi-cell formulas.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Volatile">
      <summary>The function is volatile.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Constant">
      <summary>The function represents a constant value.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Async">
      <summary>The function contains asynchronous function</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Boolean">
      <summary>Indicates that the function will return boolean result.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Number">
      <summary>Indicates that the function will return numeric result.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Date">
      <summary>Indicates that the function will return date result.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Time">
      <summary>Indicates that the function will return timespan result.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Text">
      <summary>Indicates that the function will return string result.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Error">
      <summary>Indicates that the function will return CalcError result.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Reference">
      <summary>Indicates that the function will return reference result.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Array">
      <summary>Indicates that the function will return array result.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Variant">
      <summary>Indicates that the function will return variant result.</summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.OperatorType">
      <summary>Enumerates the list of operators.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.OperatorType.Percentage">
      <summary>Represents the percentage operator (%).</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.OperatorType.Negation">
      <summary>Represents the negation operator (-).</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.OperatorType.Plus">
      <summary>Represents the plus operator (+).</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.OperatorType.ReferenceSource">
      <summary>Represents the reference source operator (!).</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.OperatorType.GreaterThanOrEquals">
      <summary>Represents the greater-than-or-equals operator (&gt;=).</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.OperatorType.GreaterThan">
      <summary>Represents the greater-than operator (&gt;).</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.OperatorType.Equals">
      <summary>Represents the equals operator (=).</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.OperatorType.Subtraction">
      <summary>Represents the subtraction operator (-).</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.OperatorType.Addition">
      <summary>Represents the addition operator (+).</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.OperatorType.Division">
      <summary>Represents the division operator (/).</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.OperatorType.Multiplication">
      <summary>Represents the multiplication operator (*).</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.OperatorType.Exponentiation">
      <summary>Represents the exponentiation operator (^).</summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.PrimitiveValueType">
      <summary>Represents the type of evaluated primitive value.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.PrimitiveValueType.Empty">
      <summary>Indicates there is no value returned.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.PrimitiveValueType.Error">
      <summary>Indicates the value type is calculation error.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.PrimitiveValueType.Logical">
      <summary>Indicates the value type is boolean.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.PrimitiveValueType.Text">
      <summary>Indicates the value type is string.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.PrimitiveValueType.Number">
      <summary>Indicates the value type is numeric.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.PrimitiveValueType.DateTime">
      <summary>Indicates the value type is DateTime which is introduced from Excel 2010.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.PrimitiveValueType.TimeSpan">
      <summary>Indicates the value type is TimeSpan.</summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.StructuredItemSpecifiers">
      <summary>Represents item specifiers of the structured object.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers.All">
      <summary>The entire table, including column headers, data, and totals (if any).</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers.Data">
      <summary>Just the data rows.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers.Headers">
      <summary>Just the header row.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers.Totals">
      <summary>Just the total row. If none exists, then it returns null.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers.ThisRow">
      <summary>Just the cells in the same row as the formula.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers.RowHeaders">
      <summary>The row headers</summary>
    </member>
    <member name="T:GrapeCity.CalcEngine.ValueType">
      <summary>Represents the type of evaluated value.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.Empty">
      <summary>Indicates there is no value returned.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.Error">
      <summary>Indicates the value type is calculation error.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.Logical">
      <summary>Indicates the value type is boolean.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.Text">
      <summary>Indicates the value type is string.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.Number">
      <summary>Indicates the value type is numeric.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.DateTime">
      <summary>Indicates the value type is DateTime which is introduced from Excel 2010.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.TimeSpan">
      <summary>Indicates the value type is TimeSpan.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.ValuesArray">
      <summary>Indicates the value type is array.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.Reference">
      <summary>Indicates the value type is reference (declared in the formula or be calculated)</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.AdjustableReference">
      <summary>Indicates the value type is reference which is declared in the formula</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.MultiReference">
      <summary>Indicates the value type is multi-reference.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.ValueType.Reference3D">
      <summary>Indicates the value type is 3D-Reference.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.Volatility.None">
      <summary>The function always returns same result for a given arguments.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.Volatility.Volatile">
      <summary>The volatile function must be recalculated at least once every time the workbook set is recalculated.</summary>
    </member>
    <member name="F:GrapeCity.CalcEngine.Volatility.VolatileInstance">
      <summary>The volatile function must be recalculated for every instance.</summary>
    </member>
  </members>
</doc>